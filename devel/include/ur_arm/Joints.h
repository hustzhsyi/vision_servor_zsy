// Generated by gencpp from file ur_arm/Joints.msg
// DO NOT EDIT!


#ifndef UR_ARM_MESSAGE_JOINTS_H
#define UR_ARM_MESSAGE_JOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_arm
{
template <class ContainerAllocator>
struct Joints_
{
  typedef Joints_<ContainerAllocator> Type;

  Joints_()
    : base(0.0)
    , shoulder(0.0)
    , elbow(0.0)
    , wrist1(0.0)
    , wrist2(0.0)
    , wrist3(0.0)  {
    }
  Joints_(const ContainerAllocator& _alloc)
    : base(0.0)
    , shoulder(0.0)
    , elbow(0.0)
    , wrist1(0.0)
    , wrist2(0.0)
    , wrist3(0.0)  {
  (void)_alloc;
    }



   typedef double _base_type;
  _base_type base;

   typedef double _shoulder_type;
  _shoulder_type shoulder;

   typedef double _elbow_type;
  _elbow_type elbow;

   typedef double _wrist1_type;
  _wrist1_type wrist1;

   typedef double _wrist2_type;
  _wrist2_type wrist2;

   typedef double _wrist3_type;
  _wrist3_type wrist3;





  typedef boost::shared_ptr< ::ur_arm::Joints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_arm::Joints_<ContainerAllocator> const> ConstPtr;

}; // struct Joints_

typedef ::ur_arm::Joints_<std::allocator<void> > Joints;

typedef boost::shared_ptr< ::ur_arm::Joints > JointsPtr;
typedef boost::shared_ptr< ::ur_arm::Joints const> JointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_arm::Joints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_arm::Joints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ur_arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ur_arm': ['/home/zhsyi/vision_servo_zsy/src/ur_arm/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ur_arm::Joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_arm::Joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_arm::Joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_arm::Joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_arm::Joints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_arm::Joints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_arm::Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "281044fc8b02f4a962bd27f7e019cd01";
  }

  static const char* value(const ::ur_arm::Joints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x281044fc8b02f4a9ULL;
  static const uint64_t static_value2 = 0x62bd27f7e019cd01ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_arm::Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_arm/Joints";
  }

  static const char* value(const ::ur_arm::Joints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_arm::Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 base\n\
float64 shoulder\n\
float64 elbow\n\
float64 wrist1\n\
float64 wrist2\n\
float64 wrist3\n\
";
  }

  static const char* value(const ::ur_arm::Joints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_arm::Joints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base);
      stream.next(m.shoulder);
      stream.next(m.elbow);
      stream.next(m.wrist1);
      stream.next(m.wrist2);
      stream.next(m.wrist3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_arm::Joints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_arm::Joints_<ContainerAllocator>& v)
  {
    s << indent << "base: ";
    Printer<double>::stream(s, indent + "  ", v.base);
    s << indent << "shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.shoulder);
    s << indent << "elbow: ";
    Printer<double>::stream(s, indent + "  ", v.elbow);
    s << indent << "wrist1: ";
    Printer<double>::stream(s, indent + "  ", v.wrist1);
    s << indent << "wrist2: ";
    Printer<double>::stream(s, indent + "  ", v.wrist2);
    s << indent << "wrist3: ";
    Printer<double>::stream(s, indent + "  ", v.wrist3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_ARM_MESSAGE_JOINTS_H
